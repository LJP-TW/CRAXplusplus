// Copyright 2021-2022 Software Quality Laboratory, NYCU.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <s2e/Plugins/CRAX/CRAX.h>
#include <s2e/Plugins/CRAX/Expr/BinaryExprEvaluator.h>
#include <s2e/Plugins/CRAX/Utils/StringUtil.h>

#include <cassert>
#include <fstream>

#include "ExploitGenerator.h"

namespace s2e::plugins::crax {

class DefaultCoreGenerator : public ICoreGenerator {
public:
    virtual ~DefaultCoreGenerator() override = default;
    
    virtual void generateMainFunction(S2EExecutionState *state,
                                      std::vector<RopSubchain> ropChain,
                                      std::vector<uint8_t> stage1) override {
        for (size_t i = 0; i < ropChain.size(); i++) {
            for (const ref<Expr> &e : ropChain[i]) {
                g_crax->getExploit().appendRopPayload(evaluate<std::string>(e));
            }
            g_crax->getExploit().flushRopPayload();
        }
    }
};


ExploitGenerator::ExploitGenerator()
    : m_state(),
      m_ropChainBuilder(),
      m_coreGenerator() {}


void ExploitGenerator::run(S2EExecutionState *state) {
    std::vector<RopSubchain> ropChain;
    std::vector<uint8_t> stage1;

    m_state = state;

    if (!checkRequirements()) {
        return;
    }

    initialize();

    if (auto elfBase = g_crax->getUserSpecifiedElfBase()) {
        log<WARN>()
            << "Constraining elfBase to " << hexval(elfBase)
            << " as requested.\n";

        g_crax->getExploit().getElf().setBase(elfBase);
    }

    ropChain = buildFullRopChain();

    if (ropChain.empty()) {
        return;
    }

    stage1 = RopChainBuilder::getOneConcreteInput(*state);

    if (shouldGenerateFullExploitScript()) {
        generateFullExploitScript(std::move(ropChain), std::move(stage1));
    } else {
        generateStage1Payload(std::move(ropChain), std::move(stage1));
    }
}

bool ExploitGenerator::checkRequirements() const {
    for (auto m : g_crax->getModules()) {
        if (!m->checkRequirements()) {
            log<WARN>() << "Requirements unmet (Module: " << m->toString() << ")\n";
            return false;
        }
    }

    for (auto t : g_crax->getTechniques()) {
        if (!t->checkRequirements()) {
            log<WARN>() << "Requirements unmet (Technique: " << t->toString() << ")\n";
            return false;
        }
    }

    return true;
}

void ExploitGenerator::initialize() {
    // Maybe initialize the core generator.
    if (!m_coreGenerator) {
        // XXX: What if more than one module has a core generator?
        for (auto m : g_crax->getModules()) {
            if (auto coreGenerator = m->makeCoreGenerator()) {
                log<WARN>() << "Using core generator from module: " << m->toString() << '\n';
                m_coreGenerator = std::move(coreGenerator);
                break;
            }
        }
        // No module has a core generator, so we'll use the default one.
        if (!m_coreGenerator) {
            m_coreGenerator = std::make_unique<DefaultCoreGenerator>();
        }
    }

    g_crax->getExploit().reset();
    m_ropChainBuilder.reset();

    for (auto t : g_crax->getTechniques()) {
        log<WARN>() << "Initializing technique: " << t->toString() << '\n';
        t->initialize();
    }
}

std::vector<RopSubchain> ExploitGenerator::buildFullRopChain() {
    for (auto t : g_crax->getTechniques()) {
        if (!m_ropChainBuilder.chain(*t)) {
            return {};
        }
    }

    return m_ropChainBuilder.build();
}


bool ExploitGenerator::shouldGenerateFullExploitScript() const {
    return !g_crax->getUserSpecifiedCanary() && !g_crax->getUserSpecifiedElfBase();
}

bool ExploitGenerator::generateFullExploitScript(std::vector<RopSubchain> ropChain,
                                                 std::vector<uint8_t> stage1) {
    Exploit &exploit = g_crax->getExploit();
    const ELF &elf = exploit.getElf();
    const ELF &libc = exploit.getLibc();
    const std::string &elfPrefix = elf.getVarPrefix();
    const std::string &libcPrefix = libc.getVarPrefix();

    // Write exploit shebang.
    exploit.writeline(Exploit::s_shebang);

    // Pwntools stuff.
    exploit.writelines({
        "from pwn import *",
        "context.update(arch = 'amd64', os = 'linux', log_level = 'info')",
        "",
        format("%s = ELF('%s', checksec=False)", elfPrefix.c_str(), exploit.getElfFilename().c_str()),
        format("%s = ELF('%s', checksec=False)", libcPrefix.c_str(), exploit.getLibcFilename().c_str()),
        ""
    });

    exploit.registerSymbol("canary", 0);

    // XXX: add support for shared libraries other than libc.so.6
    exploit.registerSymbol(elfPrefix + "_base", 0);
    exploit.registerSymbol(libcPrefix + "_base", 0);

    // Declare symbols and values.
    for (const auto &entry : exploit.getSymtab()) {
        const auto &name = entry.first;
        const auto &value = entry.second;
        exploit.writeline(format("%s = 0x%llx", name.c_str(), value));
    }

    exploit.writeline();

    // Define solve_stage1() function.
    if (elf.checksec.hasCanary || elf.checksec.hasPIE) {
        exploit.writeline("def solve_stage1(canary, elf_base, iostates) -> bytes:");
        exploit.setIndentLevel(4);
        exploit.writelines({
            "os.system('./launch-crax.sh -c {} -e {} -s {}'"
            ".format(hex(canary), hex(elf_base), iostates))",
            "with open('stage1.bin', 'rb') as f:",
            "    return f.read()",
        });
        exploit.setIndentLevel(0);
        exploit.writeline();
    }

    // Write exploit body.
    exploit.writeline("if __name__ == '__main__':");
    exploit.setIndentLevel(4);
    exploit.writeline(format("proc = %s.process()", elfPrefix.c_str()));

    // Generate the core logic
    m_coreGenerator->generateMainFunction(m_state, std::move(ropChain), std::move(stage1));

    // Write exploit trailer.
    exploit.setIndentLevel(4);
    exploit.writeline("proc.interactive()");

    // Write the buffered content to the file.
    std::string filename = exploit.getFilename(m_state->getID());
    std::ofstream ofs(filename);
    ofs << exploit.getContent();

    log<WARN>() << "Generated exploit: " << filename << '\n';
    return true;
}

bool ExploitGenerator::generateStage1Payload(std::vector<RopSubchain> ropChain,
                                             std::vector<uint8_t> stage1) {
    if (ropChain[0].size()) {
        assert(ropChain[0].size() == 1);
        auto bve = dyn_cast<ByteVectorExpr>(ropChain[0][0]);
        stage1 = bve->getBytes();
        stage1 = std::vector<uint8_t>(stage1.begin(), stage1.end());
    }

    // Write the payload to the file.
    std::string filename = "stage1.bin";
    std::ofstream ofs(filename, std::ios::binary);
    ofs.write(reinterpret_cast<const char *>(stage1.data()), stage1.size());

    log<WARN>() << "Generated stage1 payload: " << filename << '\n';
    return true;
}

}  // namespace s2e::plugins::crax
