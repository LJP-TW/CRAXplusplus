// Copyright (C) 2021-2022, Marco Wang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <s2e/Plugins/Requiem/Requiem.h>
#include <s2e/Plugins/Requiem/Utils/Subprocess.h>
#include <s2e/Plugins/Requiem/Utils/StringUtil.h>

#include <cassert>
#include <sstream>
#include <string>
#include <vector>

#include "Exploit.h"

using namespace klee;
namespace py = pybind11;

namespace s2e::plugins::requiem {

Script::Script(const std::string &filename)
    : m_filename(filename),
      m_content(),
      m_symtab() {
    assert(filename.size());
}


bool Script::hasSymbol(const std::string &name) const {
    return m_symtab.find(name) != m_symtab.end();
}

void Script::registerSymbol(const std::string &name, uint64_t addr) {
    if (m_symtab.find(name) != m_symtab.end()) {
        throw Script::DuplicatedSymbolException(name);
    }
    m_symtab[name] = addr;
}

uint64_t Script::getSymbolValue(const std::string &name) const {
    auto it = m_symtab.find(name);
    if (it == m_symtab.end()) {
        throw Script::UndefinedSymbolException(name);
    }
    return it->second;
}



const std::string Exploit::s_shebang = "#!/usr/bin/env python3";

Exploit::Exploit(Requiem &ctx,
                 const std::string &elfFilename,
                 const std::string &libcFilename)
    : Script("exploit.py"),
      m_ctx(ctx),
      m_elfFilename(elfFilename),
      m_libcFilename(libcFilename) ,
      m_elf(m_ctx.pwnlib(), elfFilename),
      m_libc(m_ctx.pwnlib(), libcFilename),
      m_ropPayloadLines() {}


uint64_t Exploit::resolveGadget(const std::string &assembly) {
    // Get the output of `ROPgadget --binary <m_elfFilename> | grep <assembly>`
    // and store it in `output`.
    subprocess::popen ropGadget("ROPgadget", {"--binary", m_elfFilename});
    ropGadget.close();

    subprocess::popen grep("grep", {assembly});
    grep.stdin() << ropGadget.stdout().rdbuf();
    grep.close();
    std::string output = toString(grep.stdout());

    // Example entry:
    // 0x000000000040117d : pop rbp ; ret
    for (const auto &line : split(output, '\n')) {
        size_t firstSpaceIdx = line.find_first_of(" ");
        size_t asmBeginIdx = firstSpaceIdx + 3;  // skips ": ".

        std::string addrStr = line.substr(0, firstSpaceIdx);
        std::string asmStr = line.substr(asmBeginIdx);

        // Look for an exact match.
        if (asmStr == assembly) {
            uint64_t addr = std::stoull(addrStr, nullptr, 0);
            m_ctx.log<INFO>()
                << format("Resolved gadget: [0x%x] %s\n", addr, asmStr.c_str());
            return addr;
        }
    }

    m_ctx.log<WARN>() << "Cannot resolve gadget: " << assembly << "\n";
    return 0;
}

void Exploit::appendRopPayload(const std::string &ropPayload) {
    if (m_ropPayloadLines.empty()) {
        m_ropPayloadLines.push_back(format("    payload  = %s", ropPayload.c_str()));
    } else {
        m_ropPayloadLines.push_back(format("    payload += %s", ropPayload.c_str()));
    }
}

void Exploit::flushRopPayload() {
    writelines(m_ropPayloadLines);
    writelines({
        "    proc.send(payload)",
        "    time.sleep(0.2)",
        ""
    });
    m_ropPayloadLines.clear();
}

}  // namespace s2e::plugins::requiem
